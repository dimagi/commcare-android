import org.apache.tools.ant.filters.ReplaceTokens

////////////
// README //
////////////

// This build script assumes the following directory structure:
// - somewhere/your/code/directory/is
// -- commcare-android (github: https://github.com/dimagi/commcare-android/)
// -- commcare-core (github: https://github.com/dimagi/commcare-core/)
// these directories MUST be named like this, or it won't work

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'androidx.navigation.safeargs'
apply from: 'jacoco.gradle'

repositories {
    // for local aar inclusion
    flatDir {
        dirs 'libs'
    }
    maven { url 'https://jitpack.io' }
    maven {url 'https://repository.liferay.com/nexus/content/repositories/public/'}
}

configurations {
    // prevents libs from including commons-logging, which Android already does
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
    implementation 'androidx.exifinterface:exifinterface:1.3.6'
    testImplementation 'junit:junit:4.13.2'
    testImplementation('org.robolectric:robolectric:4.8.2') {
        exclude(group: 'org.bouncycastle', module: 'bcprov-jdk15on')
    }
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test:runner:1.5.2'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'androidx.work:work-testing:2.7.1'
    testImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    testImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.3'
    testImplementation 'io.mockk:mockk:1.12.7'
    testImplementation 'org.json:json:20231013'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.json:json:20140107'
    testImplementation project(path: ':commcare-core', configuration: 'testsAsJar')

    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.ext:truth:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'

    // need uiautomator to rotate the device.
    // this only works with API >=18
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    // release build type expects commcare jars to be in app/libs
    implementation(project(':commcare-core')) {
        exclude module: 'xpp3'
    }

    implementation project(':commcare-support-library')

    // this syntax doesn't work for compiling .aar files, so those have to be loaded manually
    implementation fileTree(include: '*.jar', exclude: 'regexp-me.jar', dir: 'libs')
    implementation(name: 'htmlspanner-custom', ext: 'aar')
    implementation 'com.github.dimagi:zebra-print-android:v1.3'
    implementation 'com.simprints:libsimprints:2024.2.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'org.bouncycastle:bcprov-jdk15to18:1.72'
    implementation 'com.google.android.gms:play-services-maps:19.0.0'
    implementation 'joda-time:joda-time:2.9.4'
    implementation 'net.zetetic:android-database-sqlcipher:4.5.3@aar'
    implementation 'androidx.sqlite:sqlite:2.2.0'
    implementation 'com.google.android.gms:play-services-auth:21.3.0'
    implementation 'com.google.android.gms:play-services-auth-api-phone:18.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.google.android.gms:play-services-identity:18.1.0'
    implementation 'com.google.android.gms:play-services-base:18.5.0'

    implementation('org.apache.james:apache-mime4j:0.7.2') {
        exclude module: 'commons-io'
    }
    implementation('org.apache.httpcomponents:httpmime:4.5.6')
    implementation 'net.sourceforge.htmlcleaner:htmlcleaner:2.26'
    implementation 'org.jsoup:jsoup:1.15.3'
    implementation 'com.scottyab:rootbeer-lib:0.1.0'

    implementation 'com.carrotsearch:hppc:0.9.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'
    implementation 'com.journeyapps:zxing-android-embedded:3.6.0'
    implementation 'com.google.firebase:firebase-analytics:20.1.2'
    implementation 'com.google.firebase:firebase-messaging:21.1.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.3.7'

    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation('com.github.bumptech.glide:glide:4.9.0') {
        exclude group: 'com.android.support'
    }

    implementation 'com.getkeepsafe.relinker:relinker:1.4.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    // Markdown
    implementation "io.noties.markwon:core:$markwon_version"
    implementation "io.noties.markwon:ext-tables:$markwon_version"
    implementation "io.noties.markwon:ext-strikethrough:$markwon_version"

    // Kujaku
    implementation 'com.android.volley:volley:1.2.1'
    implementation 'com.snatik:storage:2.1.0'
    implementation('io.ona.kujaku:library:0.9.0') {
        exclude module: 'xpp3'
        exclude module: 'volley'
        exclude module: 'storage'
    }
    implementation 'androidx.work:work-runtime:2.10.0'
    implementation 'androidx.work:work-runtime-ktx:2.10.0'

    implementation 'com.google.android.play:app-update:2.1.0'
    implementation 'android.arch.lifecycle:common-java8:1.1.1'


    implementation('com.squareup.okhttp3:okhttp-tls:4.11.0') {
        exclude(group: 'org.bouncycastle', module: 'bcprov-jdk15on')
    }

    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'com.appmattus.certificatetransparency:certificatetransparency-android:2.5.4'

    // Dependency required for API desugaring
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs_minimal:2.1.3'

    implementation 'androidx.biometric:biometric:1.1.0'

    implementation 'io.michaelrocks:libphonenumber-android:8.13.11'
    implementation 'com.nulab-inc:zxcvbn:1.7.0'

    def nav_version = '2.8.5'
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    implementation "androidx.navigation:navigation-compose:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
}

ext {
    // Obtained from ~/.gradle/gradle.properties on build server (mobile agent), or your local
    // Obtained from ~/.gradle/gradle.properties on build server (mobile agent), or your local
    // ~/.gradle/gradle.properties file, or loads default empty strings if neither is present
    MAPBOX_SDK_API_KEY = project.properties['MAPBOX_SDK_API_KEY'] ?: ''
    ANALYTICS_TRACKING_ID_DEV = project.properties['ANALYTICS_TRACKING_ID_DEV'] ?: ''
    ANALYTICS_TRACKING_ID_LIVE = project.properties['ANALYTICS_TRACKING_ID_LIVE'] ?: ''
    GOOGLE_PLAY_MAPS_API_KEY = project.properties['GOOGLE_PLAY_MAPS_API_KEY'] ?: ''
    RELEASE_STORE_FILE = project.properties['RELEASE_STORE_FILE'] ?: '.'
    RELEASE_STORE_PASSWORD = project.properties['RELEASE_STORE_PASSWORD'] ?: ''
    RELEASE_KEY_ALIAS = project.properties['RELEASE_KEY_ALIAS'] ?: ''
    RELEASE_KEY_PASSWORD = project.properties['RELEASE_KEY_PASSWORD'] ?: ''
    TRUSTED_SOURCE_PUBLIC_KEY = project.properties['TRUSTED_SOURCE_PUBLIC_KEY'] ?:
            'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHiuy2ULV4pobkuQN2TEjmR1tn' +
                    'HJ+F335hm/lVdaFQzvBmeq64MUMbumheVLDJaSUiAVzqSHDKJWH01ZQRowqBYjwo' +
                    'ycVSQSeO2glc6XZZ+CJudAPXe8iFWLQp3kBBnBmVcBXCOQFO7aLgQMv4nqKZsLW0' +
                    'HaAJkjpnc165Os+aYwIDAQAB'
    GOOGLE_SERVICES_API_KEY = project.properties['GOOGLE_SERVICES_API_KEY'] ?: ''
    QA_BETA_APP_ID = ''
    STANDALONE_APP_ID = ''
    LTS_APP_ID = ''
    COMMCARE_APP_ID = ''
    HQ_API_USERNAME = project.properties['HQ_API_USERNAME'] ?: ''
    HQ_API_PASSWORD = project.properties['HQ_API_PASSWORD'] ?: ''
    TEST_BUILD_TYPE = project.properties['TEST_BUILD_TYPE'] ?: 'debug'
    FIREBASE_DATABASE_URL = project.properties['FIREBASE_DATABASE_URL'] ?: ''
}

afterEvaluate {
    // Hack to get assets to show up in robolectric tests; try to eventually remove this
    preCommcareDebugUnitTestBuild.dependsOn mergeCommcareDebugAssets
    processStandaloneDebugGoogleServices.dependsOn injectPropertiesIntoFirebaseConfigFile
    processStandaloneReleaseGoogleServices.dependsOn injectPropertiesIntoFirebaseConfigFile
    processLtsDebugGoogleServices.dependsOn injectPropertiesIntoFirebaseConfigFile
    processLtsReleaseGoogleServices.dependsOn injectPropertiesIntoFirebaseConfigFile
    processCommcareDebugGoogleServices.dependsOn injectPropertiesIntoFirebaseConfigFile
    processCommcareReleaseGoogleServices.dependsOn injectPropertiesIntoFirebaseConfigFile
}

/**
 * https://discuss.gradle.org/t/gradle-7-0-seems-to-take-an-overzealous-approach-to-inter-task-dependencies/39656/2
 * Gradle 7.0 treats any copy tasks as having an implicit dependencies with each other.
 */
tasks.register('injectPropertiesIntoFirebaseConfigFile') {
    description = 'Injects properties into the google-services.json file at runtime'

    copy {
        from 'templates/google-services.json'
        filter(ReplaceTokens, tokens: [apiKey: project.ext.GOOGLE_SERVICES_API_KEY,
                                       firebaseDatabaseUrl: project.ext.FIREBASE_DATABASE_URL])
        into projectDir
    }
}

def ccAppId = project.hasProperty('cc_app_id') ? cc_app_id : ''
def ccDomain = project.hasProperty('cc_domain') ? cc_domain : ''
def isConsumerApp = project.hasProperty('is_consumer_app') ? is_consumer_app : 'false'
def runDownloadScripts = project.hasProperty('run_download_scripts') ? run_download_scripts : 'true'
def ccDomainSafe = ccDomain.replaceAll('-', '')
def consumerAppUsername = getConsumerAppUsername(isConsumerApp)
def consumerAppPassword = getConsumerAppPassword(isConsumerApp)

/**
 * Get the version code from command line param
 *
 * @return int If the param -PversionCode is present then return int value or 1
 */
def computeVersionCode() {
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : 1
    println "VersionCode is set to $code"
    return code
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

android {
    namespace 'org.commcare.dalvik'
    compileSdk 35

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
        disable 'ResourceType'
    }

    // Espresso requires us to disable animations on device.
    testOptions {
        animationsDisabled = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    buildFeatures {
        buildConfig true
        dataBinding true
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34

        applicationId 'org.commcare.dalvik'
        testNamespace 'org.commcare.dalvik.test'

        project.ext.COMMCARE_APP_ID = applicationId
        // set the app name
        def applicationName = 'CommCare'
        resValue 'string', 'application_name', applicationName
        def odkProviderStr = 'org.commcare.android.provider.odk'
        manifestPlaceholders = [
                odkProvider         : odkProviderStr,
                googlePlayMapsApiKey: "${project.ext.GOOGLE_PLAY_MAPS_API_KEY}"
        ]

        versionCode 1

        // when set, app won't show install screen and try to install
        // resources from assets folder
        buildConfigField 'boolean', 'IS_SINGLE_APP_BUILD', 'false'
        buildConfigField 'boolean', 'IS_CONSUMER_APP', 'false'
        buildConfigField 'String', 'CONSUMER_APP_USERNAME', "\"\""
        buildConfigField 'String', 'CONSUMER_APP_PASSWORD', "\"\""

        buildConfigField 'String', 'CC_AUTHORITY', "\"${applicationId}\""
        buildConfigField 'String', 'ODK_AUTHORITY', "\"${odkProviderStr}\""

        buildConfigField 'String', 'BUILD_DATE', "\"" + getDate() + "\""
        buildConfigField 'String', 'BUILD_NUMBER', "\"" + computeVersionCode() + "\""
        buildConfigField 'String', 'TRUSTED_SOURCE_PUBLIC_KEY', "\"${project.ext.TRUSTED_SOURCE_PUBLIC_KEY}\""
        buildConfigField 'String', 'ANALYTICS_TRACKING_ID_LIVE', "\"${project.ext.ANALYTICS_TRACKING_ID_LIVE}\""
        buildConfigField 'String', 'ANALYTICS_TRACKING_ID_DEV', "\"${project.ext.ANALYTICS_TRACKING_ID_DEV}\""
        buildConfigField 'String', 'MAPBOX_SDK_API_KEY', "\"${project.ext.MAPBOX_SDK_API_KEY}\""
        buildConfigField "String", "FIREBASE_DATABASE_URL", "\"${project.ext.FIREBASE_DATABASE_URL}\""
        buildConfigField 'String', 'CCC_HOST', "\"connect.dimagi.com\""

        testInstrumentationRunner 'org.commcare.CommCareJUnitRunner'
    }

    buildFeatures {
        viewBinding true
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            variant.outputs.each { output ->
                output.versionCodeOverride = computeVersionCode()
            }
        }
    }

    compileOptions {
        // Flag to enable support for API desugaring
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    signingConfigs {
        release {
            storeFile file(project.ext.RELEASE_STORE_FILE)
            storePassword project.ext.RELEASE_STORE_PASSWORD
            keyAlias project.ext.RELEASE_KEY_ALIAS
            keyPassword project.ext.RELEASE_KEY_PASSWORD
        }
    }

    def sourceLocations = ['src']

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = sourceLocations
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        commcare {
            manifest.srcFile 'CommcareAndroidManifest.xml'
        }

        lts {
            manifest.srcFile 'CommcareAndroidManifest.xml'
        }

        cccStaging {
            manifest.srcFile 'CommcareAndroidManifest.xml'
        }

        standalone {
            res.srcDirs = ['standalone/res']
            assets.srcDirs = ['standalone/assets']
        }

        test {
            java.srcDirs = ['unit-tests/src/']
            resources.srcDirs = ['unit-tests/resources/']
        }

        androidTest {
            setRoot('instrumentation-tests/')
            java.srcDirs = ['instrumentation-tests/src/']
            resources.srcDirs = ['instrumentation-tests/resources']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    // Our flavours doesn't differ on a particular dimension yet, so just specify a dummy
    flavorDimensions 'dummy'
    productFlavors {
        commcare {
            // builds normal commcare
            // use the settings from defaultConfig
        }

        lts {
            // long term support build of CommCare
            applicationId 'org.commcare.lts'
            project.ext.LTS_APP_ID = applicationId

            // setup content provider strings correctly to not conflict with other apps
            def odkProviderStr = 'org.commcare.lts.provider.odk'
            manifestPlaceholders = [odkProvider: odkProviderStr]
            buildConfigField 'String', 'CC_AUTHORITY', "\"${applicationId}\""
            buildConfigField 'String', 'ODK_AUTHORITY', "\"${odkProviderStr}\""

            // set the app name
            def applicationName = 'CommCare LTS'
            resValue 'string', 'application_name', applicationName
        }

        cccStaging {
            buildConfigField 'String', 'CCC_HOST', "\"connect-staging.dimagi.com\""

            // set the app name
            def applicationName = 'CommCare (CCC Staging)'
            resValue 'string', 'application_name', applicationName
        }

        standalone {
            // Builds commcare w/ ccz app packaged in the apk.
            // Must be invoked from command-line w/ args pointing to app domain &
            // id
            def uniquePackageIdentifier = getStandalonePackageIdentifier(ccDomainSafe, isConsumerApp)
            def appDisplayName = getStandaloneApplicationName(ccDomainSafe, isConsumerApp)

            applicationId "org.commcare.${uniquePackageIdentifier}"
            project.ext.STANDALONE_APP_ID = applicationId
            resValue 'string', 'application_name', appDisplayName
            def odkProviderStr = "org.commcare.${uniquePackageIdentifier}.provider.odk"
            manifestPlaceholders = [odkProvider: odkProviderStr]

            buildConfigField 'boolean', 'IS_SINGLE_APP_BUILD', 'true'
            buildConfigField 'boolean', 'IS_CONSUMER_APP', isConsumerApp
            buildConfigField 'String', 'CONSUMER_APP_USERNAME', "\"${consumerAppUsername}\""
            buildConfigField 'String', 'CONSUMER_APP_PASSWORD', "\"${consumerAppPassword}\""
            // include this again so that the value get reloaded
            buildConfigField 'String', 'CC_AUTHORITY', "\"${applicationId}\""
            buildConfigField 'String', 'ODK_AUTHORITY', "\"${odkProviderStr}\""
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            def applicationId = 'org.commcare.dalvik.debug'
            project.ext.COMMCARE_APP_ID = applicationId
            def applicationName = 'CommCare Debug'
            resValue 'string', 'application_name', applicationName
            def odkProviderStr = 'org.commcare.dalvik.debug.provider.odk'
            manifestPlaceholders = [odkProvider: odkProviderStr]

            minifyEnabled false
            debuggable true

            // used in test suite to build the prototype factory; otherwise unneeded
            buildConfigField 'String', 'CC_AUTHORITY', "\"${applicationId}\""
            buildConfigField 'String', 'ODK_AUTHORITY', "\"${odkProviderStr}\""
            buildConfigField 'String', 'BUILD_DIR', fixEscaping("\"${buildDir}\"")
            buildConfigField 'String', 'PROJECT_DIR', fixEscaping("\"${projectDir}\"")

            // disable crashlytics
            buildConfigField 'boolean', 'USE_CRASHLYTICS', 'false'
            ext.enableCrashlytics = false
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
            testProguardFiles 'test-proguard.cfg'

            // enable crashlytics
            buildConfigField 'boolean', 'USE_CRASHLYTICS', 'true'
            ext.enableCrashlytics = true
        }
    }

    // Ignore un-minified graphing files
    aaptOptions {
        ignoreAssetsPattern '!*.max.js:!*.max.css'
    }

    testOptions {
        unitTests.all {
            // Needed for robolectric tests to work with kxml for some bizarre reason
            jvmArgs '-noverify'
            systemProperty 'robolectric.logging.enable', true
            systemProperty 'robolectric.logging', 'stdout'
        }
        unitTests {
            includeAndroidResources = true
        }
    }

    // Needed to run espresso tests on release build.
    testBuildType project.ext.TEST_BUILD_TYPE
}

/**
 * Download and unpack commcare app associated with 'cc_app_id' into assets
 * folder
 */
tasks.register('downloadCCApp', Exec)

// task configuration phase
downloadCCApp {
    workingDir '.'

    commandLine 'bash', 'scripts/download_app_into_standalone_asset.sh', ccDomain, ccAppId, android.sourceSets.standalone.assets.srcDirs.first()

    ignoreExitValue = true

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException('exec failed; see output above')
        }
    }
}

// dynamic check at task execution time
downloadCCApp {
    doLast {
        if (ccAppId == '') {
            throw new InvalidUserDataException('Please provide cc_app_id property (CommCare App ID) to be packaged with apk')
        }
        if (ccDomain == '') {
            throw new InvalidUserDataException('Please provide cc_domain property (CommCare App Domain) to be packaged with apk')
        }
    }
}


tasks.register('downloadRestoreFile', Exec)

// task configuration phase
downloadRestoreFile {
    workingDir '.'

    commandLine 'bash', 'scripts/download_restore_into_standalone_asset.sh', ccDomain, consumerAppUsername, consumerAppPassword, android.sourceSets.standalone.assets.srcDirs.first()

    ignoreExitValue = true

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException('exec failed; see output above')
        }
    }
}

// dynamic check at task execution time
downloadRestoreFile {
    doLast {
        if (consumerAppUsername == '') {
            throw new InvalidUserDataException('Please provide username for restore to be packaged with apk')
        }
        if (consumerAppPassword == '') {
            throw new InvalidUserDataException('Please provide password for restore to be packaged with apk')
        }
    }
}

// dynamically inject commcare app download into standalone build process
tasks.configureEach { task ->
    if ((task.name == 'processStandaloneDebugResources' ||
            task.name == 'processStandaloneReleaseResources') && 'true' == runDownloadScripts) {
        task.dependsOn downloadCCApp
    }
    if ((task.name == 'processStandaloneDebugResources' ||
            task.name == 'processStandaloneReleaseResources')
            && "true" == isConsumerApp && "true" == runDownloadScripts) {
        task.dependsOn downloadRestoreFile
    }
    if (isInstrumentationTestTask(task)) {
        android.defaultConfig.buildConfigField "String", "HQ_API_USERNAME", "\"${project.ext.HQ_API_USERNAME}\""
        android.defaultConfig.buildConfigField "String", "HQ_API_PASSWORD", "\"${project.ext.HQ_API_PASSWORD}\""
    }
}

/**
 * convert version code to english words for use in application id.
 * example: 2.26 -> twotwosix
 */
static def numbersToLetters(String version) {
    String[] chars = version.split('')
    StringBuilder words = new StringBuilder()
    for (String num : chars) {
        switch (num) {
            case '1': words.append('one'); break
            case '2': words.append('two'); break
            case '3': words.append('three'); break
            case '4': words.append('four'); break
            case '5': words.append('five'); break
            case '6': words.append('six'); break
            case '7': words.append('seven'); break
            case '8': words.append('eight'); break
            case '9': words.append('nine'); break
            case '0': words.append('zero'); break
            default: break // skip non-numeric
        }
    }
    return words.toString()
}

static def fixEscaping(String s) {
    return s.replaceAll('\\\\', '\\\\\\\\')
}

def getStandalonePackageIdentifier(ccDomainSafe, isConsumerApp) {
    if (project.hasProperty('application_name')) {
        return ccDomainSafe + '.' + cleanseAppNameForPackageIdentifier(application_name)
    } else if ('true' == isConsumerApp) {
        throw new InvalidUserDataException('An application_name property must be provided for consumer app standalone builds')
    } else {
        return ccDomainSafe
    }
}

static def cleanseAppNameForPackageIdentifier(appName) {
    return appName.replaceAll("[ '.:]", "").replaceAll('\\\\', '').toLowerCase()
}

def getStandaloneApplicationName(ccDomainSafe, isConsumerApp) {
    if (project.hasProperty('application_name')) {
        return application_name
    } else if ('true' == isConsumerApp) {
        throw new InvalidUserDataException('An application_name property must be provided for consumer app standalone builds')
    } else {
        return ccDomainSafe
    }
}

def getConsumerAppUsername(isConsumerApp) {
    if (project.hasProperty('username')) {
        return username
    } else if ('true' == isConsumerApp) {
        throw new InvalidUserDataException('A username property must be provided for consumer app standalone builds')
    } else {
        return ''
    }
}

def getConsumerAppPassword(isConsumerApp) {
    if (project.hasProperty('password')) {
        return password
    } else if ('true' == isConsumerApp) {
        throw new InvalidUserDataException('A password property must be provided for consumer app standalone builds')
    } else {
        return ''
    }
}

downloadLicenses {
    includeProjectDependencies = true
    dependencyConfiguration = 'compile'
}

static def isInstrumentationTestTask(task){
    def instrumentationTestTaskNamePattern = /^(assemble|connected).*AndroidTest/
    return task.name ==~ instrumentationTestTaskNamePattern
}
