import org.apache.tools.ant.filters.ReplaceTokens
import com.android.builder.core.DefaultManifestParser

////////////
// README //
////////////

// This build script assumes the following directory structure:
// - somewhere/your/code/directory/is
// -- commcare-android (github: https://github.com/dimagi/commcare-android/)
// -- commcare-core (github: https://github.com/dimagi/commcare-core/)
// these directories MUST be named like this, or it won't work

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'

repositories {
    mavenCentral()
    jcenter()
    // for local aar inclusion
    flatDir {
        dirs 'libs'
    }
    maven { url 'https://maven.fabric.io/public' }
    google()
    maven { url "https://jitpack.io" }
}

configurations {
    // prevents libs from including commons-logging, which Android already does
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {

    testImplementation 'junit:junit:4.12'
    testImplementation ('org.robolectric:robolectric:3.2.2')
    testImplementation 'org.robolectric:shadows-multidex:3.2.2'
    testImplementation 'org.robolectric:shadows-core:3.2.2'
    testImplementation 'org.json:json:20140107'
    testImplementation project(path: ':commcare-core', configuration: 'testsAsJar')

    // release build type expects commcare jars to be in app/libs
    implementation(project(':commcare-core')) {
        exclude module: 'xpp3'
    }

    // this syntax doesn't work for compiling .aar files, so those have to be loaded manually
    implementation fileTree(include: '*.jar',exclude: 'regexp-me.jar', dir: 'libs')
    implementation(name: 'htmlspanner-custom', ext: 'aar')
    implementation(name: 'android-zebra-interface-1.1', ext: 'aar')
    implementation 'com.simprints:LibSimprints:1.0.10'
    implementation 'com.android.support:multidex:1.0.1'
    implementation 'com.android.support:cardview-v7:25.2.0'
    implementation 'com.android.support:recyclerview-v7:25.2.0'
    implementation 'com.android.support:support-v4:25.2.0'
    implementation 'com.android.support:preference-v7:25.2.0'
    implementation 'com.android.support:gridlayout-v7:25.2.0'
    implementation 'com.madgag.spongycastle:core:1.54.0.0'
    implementation 'com.madgag.spongycastle:prov:1.54.0.0'
    implementation 'com.google.android.gms:play-services-maps:10.0.1'
    implementation 'joda-time:joda-time:2.9.4'
    implementation 'net.zetetic:android-database-sqlcipher:3.5.7@aar'
    implementation ('org.apache.james:apache-mime4j:0.7.2') {
        exclude module: 'commons-io'
    }
    implementation('org.apache.httpcomponents:httpmime:4.3.6')
    implementation 'net.sourceforge.htmlcleaner:htmlcleaner:2.16'
    implementation 'org.jsoup:jsoup:1.8.3'
    implementation 'com.google.firebase:firebase-core:10.0.1'
    implementation 'com.google.firebase:firebase-ads:10.0.1'
    implementation 'com.carrotsearch:hppc:0.7.2'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.journeyapps:zxing-android-embedded:3.5.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Markdown
    implementation 'com.github.budsmile:bypass-android:1.0.5' //Needed for Ice Cream Sandwich (14&15)
    implementation 'ru.noties:markwon:1.0.4'
    implementation 'ru.noties:markwon-image-loader:1.0.4'
    implementation 'ru.noties:markwon-view:1.0.4'

}

ext {
    // Obtained from ~/.gradle/gradle.properties on build server (mobile agent), or your local
    // ~/.gradle/gradle.properties file, or loads default empty strings if neither is present
    ANALYTICS_TRACKING_ID_DEV = project.properties['ANALYTICS_TRACKING_ID_DEV'] ?: ""
    ANALYTICS_TRACKING_ID_LIVE = project.properties['ANALYTICS_TRACKING_ID_LIVE'] ?: ""
    GOOGLE_PLAY_MAPS_API_KEY = project.properties['GOOGLE_PLAY_MAPS_API_KEY'] ?: ""
    RELEASE_STORE_FILE = project.properties['RELEASE_STORE_FILE'] ?: "."
    RELEASE_STORE_PASSWORD = project.properties['RELEASE_STORE_PASSWORD'] ?: ""
    RELEASE_KEY_ALIAS = project.properties['RELEASE_KEY_ALIAS'] ?: ""
    RELEASE_KEY_PASSWORD = project.properties['RELEASE_KEY_PASSWORD'] ?: ""
    TRUSTED_SOURCE_PUBLIC_KEY = project.properties['TRUSTED_SOURCE_PUBLIC_KEY'] ?:
            "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHiuy2ULV4pobkuQN2TEjmR1tn" +
                    "HJ+F335hm/lVdaFQzvBmeq64MUMbumheVLDJaSUiAVzqSHDKJWH01ZQRowqBYjwo" +
                    "ycVSQSeO2glc6XZZ+CJudAPXe8iFWLQp3kBBnBmVcBXCOQFO7aLgQMv4nqKZsLW0" +
                    "HaAJkjpnc165Os+aYwIDAQAB"
    GOOGLE_SERVICES_API_KEY = project.properties['GOOGLE_SERVICES_API_KEY'] ?: ""
    QA_BETA_APP_ID = ""
    STANDALONE_APP_ID = ""
    LTS_APP_ID = ""
    COMMCARE_APP_ID = ""
}

afterEvaluate {
    // Hack to get assets to show up in robolectric tests; try to eventually remove this
    preCommcareDebugUnitTestBuild.dependsOn mergeCommcareDebugAssets

    processQabetaDebugGoogleServices.dependsOn injectGoogleServicesAPIKey
    processQabetaReleaseGoogleServices.dependsOn injectGoogleServicesAPIKey
    processStandaloneDebugGoogleServices.dependsOn injectGoogleServicesAPIKey
    processStandaloneReleaseGoogleServices.dependsOn injectGoogleServicesAPIKey
    processLtsDebugGoogleServices.dependsOn injectGoogleServicesAPIKey
    processLtsReleaseGoogleServices.dependsOn injectGoogleServicesAPIKey
    processCommcareDebugGoogleServices.dependsOn injectGoogleServicesAPIKey
    processCommcareReleaseGoogleServices.dependsOn injectGoogleServicesAPIKey
}

gradle.taskGraph.beforeTask { Task task ->
    if (task.name ==~ /.*fabricGenerateResourcesCommcareRelease/) {
        initFabricPropertiesIfNeeded()
    }
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: FABRIC_API_SECRET)
            entry(key: "apiKey", value: FABRIC_API_KEY)
        }
    }
}

task injectGoogleServicesAPIKey(type: Copy) {
    description = 'Injects the Google Services API key into the google-services.json file at runtime'

    /**
     * This is an awkward workaround for a Windows build error that occurs when you try
     * to copy something into the root directory (containing the .gradle folder). Don't
     * change it without testing on a windows machine
     */
    if (isBelowGradleThree()) {
        outputs.files.setFrom(file("$projectDir/google-services.json"))
    }

    from file("templates/google-services.json")
    filter(ReplaceTokens, tokens: [apiKey: project.ext.GOOGLE_SERVICES_API_KEY])
    into projectDir
}

def isBelowGradleThree() {
    return (gradle.gradleVersion.split("\\.")[0] as double) < 3
}

def ccAppId = project.hasProperty('cc_app_id') ? cc_app_id : ""
def ccDomain = project.hasProperty('cc_domain') ? cc_domain : ""
def isConsumerApp = project.hasProperty('is_consumer_app') ? is_consumer_app : "false"
def runDownloadScripts = project.hasProperty('run_download_scripts') ? run_download_scripts : "true"
def ccDomainSafe = ccDomain.replaceAll("-", "")
def consumerAppUsername = getConsumerAppUsername(isConsumerApp);
def consumerAppPassword = getConsumerAppPassword(isConsumerApp);
def usingAdmob = isConsumerApp && project.hasProperty('admob_id') && allAdUnitIdsPresent()
def admobId = usingAdmob ? admob_id : ""
def entityDetailAdUnitId = usingAdmob ? entity_detail_ad_id : ""
def entitySelectAdUnitId = usingAdmob ? entity_select_ad_id : ""
def menuListAdUnitId = usingAdmob ? menu_list_ad_id : ""
def menuGridAdUnitId = usingAdmob ? menu_grid_ad_id : ""

def allAdUnitIdsPresent() {
    return (project.hasProperty("entity_detail_ad_id") &&
            project.hasProperty("entity_select_ad_id") &&
            project.hasProperty("menu_list_ad_id") &&
            project.hasProperty("menu_grid_ad_id"))
}

/**
 * Get the version code from command line param
 *
 * @return int If the param -PversionCode is present then return int value or 1
 */
def computeVersionCode() {
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : 1
    println "VersionCode is set to $code"
    return code
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

android {
    compileSdkVersion 26

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
        disable "ResourceType"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    dexOptions {
        preDexLibraries = true
        jumboMode = true
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 25
        multiDexEnabled true
        applicationId "org.commcare.dalvik"
        project.ext.COMMCARE_APP_ID = applicationId
        resValue "string", "application_name", "CommCare"
        def odkProviderStr = "org.commcare.android.provider.odk"
        manifestPlaceholders = [
                odkProvider         : odkProviderStr,
                googlePlayMapsApiKey: "${project.ext.GOOGLE_PLAY_MAPS_API_KEY}"
        ]

        versionCode computeVersionCode()

        // when set, app won't show install screen and try to install
        // resources from assets folder
        buildConfigField "boolean", "IS_SINGLE_APP_BUILD", "false"
        buildConfigField "boolean", "IS_CONSUMER_APP", "false"
        buildConfigField "String", "CONSUMER_APP_USERNAME", "\"\""
        buildConfigField "String", "CONSUMER_APP_PASSWORD", "\"\""

        buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
        buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""

        buildConfigField "String", "BUILD_DATE", "\"" + getDate() + "\""
        buildConfigField "String", "BUILD_NUMBER", "\"" + computeVersionCode() + "\""
        buildConfigField "String", "TRUSTED_SOURCE_PUBLIC_KEY", "\"${project.ext.TRUSTED_SOURCE_PUBLIC_KEY}\""
        buildConfigField "String", "ANALYTICS_TRACKING_ID_LIVE", "\"${project.ext.ANALYTICS_TRACKING_ID_LIVE}\""
        buildConfigField "String", "ANALYTICS_TRACKING_ID_DEV", "\"${project.ext.ANALYTICS_TRACKING_ID_DEV}\""

        buildConfigField "String", "ADMOB_ID", "\"\""
        buildConfigField "String", "ENTITY_DETAIL_AD_UNIT_ID", "\"\""
        buildConfigField "String", "ENTITY_SELECT_AD_UNIT_ID", "\"\""
        buildConfigField "String", "MENU_LIST_AD_UNIT_ID", "\"\""
        buildConfigField "String", "MENU_GRID_AD_UNIT_ID", "\"\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file(project.ext.RELEASE_STORE_FILE)
            storePassword project.ext.RELEASE_STORE_PASSWORD
            keyAlias project.ext.RELEASE_KEY_ALIAS
            keyPassword project.ext.RELEASE_KEY_PASSWORD
        }
    }

    def sourceLocations = ['src']

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = sourceLocations
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        commcare {
            manifest.srcFile 'CommcareAndroidManifest.xml'
        }

        lts {
            manifest.srcFile 'CommcareAndroidManifest.xml'
        }

        qabeta {
            manifest.srcFile 'CommcareAndroidManifest.xml'
        }

        standalone {
            res.srcDirs = ['standalone/res']
            assets.srcDirs = ['standalone/assets']
        }

        test {
            java.srcDirs = ['unit-tests/src/']
            resources.srcDirs = ['unit-tests/resources/']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    // Our flavours doesn't differ on a particular dimension yet, so just speicfy a dummy
    flavorDimensions "dummy"
    productFlavors {
        commcare {
            // builds normal commcare
            // use the settings from defaultConfig
        }

        lts {
            // long term support build of CommCare
            applicationId "org.commcare.lts"
            project.ext.LTS_APP_ID = applicationId

            // setup content provider strings correctly to not conflict with other apps
            def odkProviderStr = "org.commcare.lts.provider.odk"
            manifestPlaceholders = [odkProvider: odkProviderStr]
            buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
            buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""

            // set the app name
            resValue "string", "application_name", " CommCare LTS"
        }

        qabeta {
            // app w/ id tied to commcare version, so you can install standalone,
            // next to play store version

            // grab commcare version from manifest
            def manifestParser = new DefaultManifestParser(android.sourceSets.main.manifest.srcFile)
            def ccVersion = manifestParser.getVersionName()
            // convert numbers to words to use in app id
            def ccVersionSafe = numbersToLetters(ccVersion)

            applicationId "org.commcare.${ccVersionSafe}"
            project.ext.QA_BETA_APP_ID = applicationId

            // setup content provider strings correctly to not conflict with other apps
            def odkProviderStr = "org.commcare.${ccVersionSafe}.provider.odk"
            manifestPlaceholders = [odkProvider: odkProviderStr]
            buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
            buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""

            // set the app name
            resValue "string", "application_name", " ${ccVersion} QA CommCare"
        }

        standalone {
            // Builds commcare w/ ccz app packaged in the apk.
            // Must be invoked from command-line w/ args pointing to app domain &
            // id
            def uniquePackageIdentifier = getStandalonePackageIdentifier(ccDomainSafe, isConsumerApp)
            def appDisplayName = getStandaloneApplicationName(ccDomainSafe, isConsumerApp)

            applicationId "org.commcare.${uniquePackageIdentifier}"
            project.ext.STANDALONE_APP_ID = applicationId
            resValue "string", "application_name", appDisplayName
            def odkProviderStr = "org.commcare.${uniquePackageIdentifier}.provider.odk"
            manifestPlaceholders = [odkProvider: odkProviderStr]

            buildConfigField "boolean", "IS_SINGLE_APP_BUILD", "true"
            buildConfigField "boolean", "IS_CONSUMER_APP", isConsumerApp
            buildConfigField "String", "CONSUMER_APP_USERNAME", "\"${consumerAppUsername}\""
            buildConfigField "String", "CONSUMER_APP_PASSWORD", "\"${consumerAppPassword}\""
            // include this again so that the value get reloaded
            buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
            buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""

            buildConfigField "String", "ADMOB_ID", "\"${admobId}\""
            buildConfigField "String", "ENTITY_DETAIL_AD_UNIT_ID", "\"${entityDetailAdUnitId}\""
            buildConfigField "String", "ENTITY_SELECT_AD_UNIT_ID", "\"${entitySelectAdUnitId}\""
            buildConfigField "String", "MENU_LIST_AD_UNIT_ID", "\"${menuListAdUnitId}\""
            buildConfigField "String", "MENU_GRID_AD_UNIT_ID", "\"${menuGridAdUnitId}\""
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            def applicationId = "org.commcare.dalvik.debug"
            project.ext.COMMCARE_APP_ID = applicationId
            resValue "string", "application_name", "CommCare Debug"
            def odkProviderStr = "org.commcare.dalvik.debug.provider.odk"
            manifestPlaceholders = [odkProvider: odkProviderStr]

            minifyEnabled true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'

            // used in test suite to build the prototype factory; otherwise unneeded
            buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
            buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""
            buildConfigField "String", "BUILD_DIR", fixEscaping("\"${buildDir}\"")
            buildConfigField "String", "PROJECT_DIR", fixEscaping("\"${projectDir}\"")

            // disable crashlytics
            buildConfigField "boolean", "USE_CRASHLYTICS", "false"
            ext.enableCrashlytics = false
        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'

            // enable crashlytics
            buildConfigField "boolean", "USE_CRASHLYTICS", "true"
            ext.enableCrashlytics = true
        }
    }

    // Ignore un-minified graphing files
    aaptOptions {
        ignoreAssetsPattern "!*.max.js:!*.max.css"
    }

    testOptions {
        unitTests.all {
            // Needed for robolectric tests to work with kxml for some bizarre reason
            jvmArgs '-noverify'
            systemProperty 'robolectric.logging.enable', true
            systemProperty 'robolectric.logging', 'stdout'
        }
    }
}

/**
 * Download and unpack commcare app associated with 'cc_app_id' into assets
 * folder
 */
task downloadCCApp(type: Exec)

// task configuration phase
downloadCCApp {
    workingDir '.'

    commandLine 'bash', 'scripts/download_app_into_standalone_asset.sh', ccDomain, ccAppId, android.sourceSets.standalone.assets.srcDirs.first()

    ignoreExitValue = true

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException("exec failed; see output above")
        }
    }
}

// dynamic check at task execution time
downloadCCApp << {
    if (ccAppId.equals("")) {
        throw new InvalidUserDataException("Please provide cc_app_id property (CommCare App ID) to be packaged with apk")
    }
    if (ccDomain.equals("")) {
        throw new InvalidUserDataException("Please provide cc_domain property (CommCare App Domain) to be packaged with apk")
    }
}


task downloadRestoreFile(type: Exec)

// task configuration phase
downloadRestoreFile {
    workingDir '.'

    commandLine 'bash', 'scripts/download_restore_into_standalone_asset.sh', ccDomain, consumerAppUsername, consumerAppPassword, android.sourceSets.standalone.assets.srcDirs.first()

    ignoreExitValue = true

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException("exec failed; see output above")
        }
    }
}

// dynamic check at task execution time
downloadRestoreFile << {
    if (consumerAppUsername.equals("")) {
        throw new InvalidUserDataException("Please provide username for restore to be packaged with apk")
    }
    if (consumerAppPassword.equals("")) {
        throw new InvalidUserDataException("Please provide password for restore to be packaged with apk")
    }
}

// dynamically inject commcare app download into standalone build process
tasks.whenTaskAdded { task ->
    if ((task.name == 'processStandaloneDebugResources' ||
            task.name == 'processStandaloneReleaseResources') && "true".equals(runDownloadScripts)) {
        task.dependsOn downloadCCApp
    }
    if ((task.name == 'processStandaloneDebugResources' ||
            task.name == 'processStandaloneReleaseResources')
            && "true".equals(isConsumerApp) && "true".equals(runDownloadScripts)) {
        task.dependsOn downloadRestoreFile
    }
}

/**
 * convert version code to english words for use in application id.
 * example: 2.26 -> twotwosix
 */
def numbersToLetters(String version) {
    String[] chars = version.split('');
    StringBuilder words = new StringBuilder();
    for (String num : chars) {
        switch (num) {
            case "1": words.append("one"); break;
            case "2": words.append("two"); break;
            case "3": words.append("three"); break;
            case "4": words.append("four"); break;
            case "5": words.append("five"); break;
            case "6": words.append("six"); break;
            case "7": words.append("seven"); break;
            case "8": words.append("eight"); break;
            case "9": words.append("nine"); break;
            case "0": words.append("zero"); break;
            default: break; // skip non-numeric
        }
    }
    return words.toString();
}

def fixEscaping(String s) {
    return s.replaceAll("\\\\", "\\\\\\\\");
}

def getStandalonePackageIdentifier(ccDomainSafe, isConsumerApp) {
    if (project.hasProperty('application_name')) {
        return ccDomainSafe + "." + cleanseAppNameForPackageIdentifier(application_name)
    } else if ("true".equals(isConsumerApp)) {
        throw new InvalidUserDataException("An application_name property must be provided for consumer app standalone builds")
    } else {
        return ccDomainSafe;
    }
}

def cleanseAppNameForPackageIdentifier(appName) {
    return appName.replaceAll("[ '.:]", "").replaceAll("\\\\", "").toLowerCase()
}

def getStandaloneApplicationName(ccDomainSafe, isConsumerApp) {
    if (project.hasProperty('application_name')) {
        return application_name;
    } else if ("true".equals(isConsumerApp)) {
        throw new InvalidUserDataException("An application_name property must be provided for consumer app standalone builds")
    } else {
        return ccDomainSafe;
    }
}

def getConsumerAppUsername(isConsumerApp) {
    if (project.hasProperty('username')) {
        return username;
    } else if ("true".equals(isConsumerApp)) {
        throw new InvalidUserDataException("A username property must be provided for consumer app standalone builds")
    } else {
        return "";
    }
}

def getConsumerAppPassword(isConsumerApp) {
    if (project.hasProperty('password')) {
        return password;
    } else if ("true".equals(isConsumerApp)) {
        throw new InvalidUserDataException("A password property must be provided for consumer app standalone builds")
    } else {
        return "";
    }
}

// must be at bottom of file to fix some stupid google bug
apply plugin: 'com.google.gms.google-services'

downloadLicenses {
    includeProjectDependencies = true
    dependencyConfiguration = 'compile'
}


