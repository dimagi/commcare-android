#!/usr/bin/env python3

"""
ccc (commcare control center) allows you to automate oft performed actions.
"""

import subprocess
import sys
import urllib.request
from os.path import basename
import os

HELP_MSG = """'capture' saves the current session for restoring later.
'install some_app.ccz' pushes and installs the ccz to device.
'update' updates to latest unstarred build
'uninstall app_id' uninstalls an installed app.
'login username password' logs into the currently seated app
'invalidate' forces recovery on next sync by providing fake case db hash.
'clear_restore_cache' sets a flag that will cause the next restore request to include a param that clears the cache on HQ.
'remote domain app_id build' downloads an app from HQ and installs it.
                             The 'build' argument is optional
'media_remote domain app_id build' downloads an app with multimedia from HQ and
                                   installs it. The 'build' argument is optional
'download domain app_id build' downloads an app from HQ.
                               The 'build' argument is optional
'media_download domain app_id build' downloads an app with multimedia from HQ.
                                     The 'build' argument is optional
"""
BASE_RECEIVER_CMD = "adb shell am broadcast -a"
BASE_ACTIVITY_CMD = "adb shell am start -n"


# String -> None
def uninstall(app_id):
    """
    Uninstall the app with the given id.
    """
    extras = {"app_id": app_id}
    cmd = receiver_command("org.commcare.dalvik.api.action" +
                           ".UninstallApp", extras)
    print(cmd)
    subprocess.call(cmd, shell=True)


# String String -> None
def login(username, password):
    """
    Perform a login to the currently seated app
    """
    extras = {"username": username, "password": password}
    cmd = receiver_command("org.commcare.dalvik.api.action" +
                           ".LoginWithCreds", extras)
    print(cmd)
    subprocess.call(cmd, shell=True)


# None -> None
def update():
    """
    Update logged in app to latest unstarred build
    """
    extras = {"useLatestBuild": True}
    cmd = receiver_command("org.commcare.dalvik.api.action." +
                           "RefreshToLatestBuildAction", extras)
    print(cmd)
    subprocess.call(cmd, shell=True)


# None -> None
def stage_recover():
    """
    Alter case db hash token to trigger a recover on next sync
    """
    cmd = receiver_command("org.commcare.dalvik.api.action" +
                           ".TriggerSyncRecover")
    print(cmd)
    subprocess.call(cmd, shell=True)


# None -> None
def capture():
    """
    Stores current CommCare session for replaying later. Enables session
    capture if it isn't already. Form entry session capture only works if
    session capture is already enabled.
    """
    cmd = receiver_command("org.commcare.dalvik.api.action" +
                           ".SessionCaptureAction")
    print(cmd)
    subprocess.call(cmd, shell=True)


def receiver_command(action, extras={}):
    """
    Build an ADB broadcast command.
    """
    cmd = "{} {}".format(BASE_RECEIVER_CMD, action)
    return cmd + get_extras_string(extras)


# String String String Boolean -> None
def remote_install(domain, app_id, build_number=None, with_media=False):
    """
    Downloads CCZ from HQ and installs it on Commcare.
    """
    ccz_file = download(domain, app_id, build_number, with_media)
    install(ccz_file)
    os.remove(ccz_file)


# String String String Boolean -> String
def download(domain, app_id, build_number=None, with_media=False):
    """
    Downloads CCZ from HQ and installs it on Commcare.
    """
    url = ("https://www.commcarehq.org/a/{domain}/apps/api/download_ccz" +
           "?app_id={app_id}").format(domain=domain, app_id=app_id)
    if build_number:
        url += "&version={build}".format(build=build_number)
    if with_media:
        url += "&include_multimedia=true".format(build=build_number)

    ccz_file = "{}.ccz".format(domain)
    try:
        urllib.request.urlretrieve(url, ccz_file)
    except urllib.error.HTTPError as e:
        if e.code == 404:
            # assume that the app is on india, not prod
            india_url = url.replace("www.commcarehq", "india.commcarehq")
            urllib.request.urlretrieve(india_url, ccz_file)
    return ccz_file


# Filepath -> None
def install(ccz_file):
    """
    Pushes CCZ file to android device and tells commcare to install it.
    """
    cmd = "adb push {} /sdcard/{}".format(ccz_file, basename(ccz_file))
    subprocess.call(cmd, shell=True)
    extras = {"validate": True}
    cmd = activity_command("org.commcare.dalvik/" +
                           "org.commcare.activities.CommCareSetupActivity",
                           get_android_file(basename(ccz_file)),
                           extras)
    print(cmd)
    subprocess.call(cmd, shell=True)


def clear_restore_cache():
    cmd = receiver_command("org.commcare.dalvik.api.action" +
                           ".ClearCacheOnRestore")
    print(cmd)
    subprocess.call(cmd, shell=True)


def activity_command(activity, data=None, extras={}):
    """
    Builds an ADB (activity) start command.
    """
    action = "-a \"android.intent.action.VIEW\""
    return "{0} \"{1}\" {2} {3} {4}".format(BASE_ACTIVITY_CMD,
                                            activity,
                                            action,
                                            get_data(data),
                                            get_extras_string(extras))


# String -> String
def get_data(data_string):
    """
    Builds ADB data option flag.
    """
    if data_string:
        return "-d {}".format(data_string)
    else:
        return ""


# [Dict String String] -> String
def get_extras_string(extras):
    """
    Builds ADB extras option flag. Supports string and boolean extras.
    """
    extra_string = ""
    for k, v in extras.items():
        if isinstance(v, True.__class__):
            extra_string += " --ez {} {}".format(k, str(v).lower())
        elif isinstance(v, str):
            extra_string += " --es {} \"{}\"".format(k, v)
    return extra_string


# String -> String
def get_android_file(filename):
    return "file:///storage/emulated/0/{}".format(filename)


def main():
    if len(sys.argv) > 5:
        filename = sys.argv[0]
        arg_count = len(sys.argv) - 1
        print("{} only accepts two argument, {} provided".format(filename,
                                                                 arg_count))
        sys.exit(0)

    command = sys.argv[1]
    dispatch = {
        'capture':
            lambda: capture(),
        'uninstall':
            lambda: uninstall(sys.argv[2]),
        'invalidate':
            lambda: stage_recover(),
        'remote':
            lambda: remote_install(*sys.argv[2:5]),
        'media_remote':
            lambda: remote_install(*sys.argv[2:5], with_media=True),
        'download':
            lambda: download(*sys.argv[2:5]),
        'media_download':
            lambda: download(*sys.argv[2:5], with_media=True),
        'login':
            lambda: login(sys.argv[2], sys.argv[3]),
        'update':
            lambda: update(),
        'help':
            lambda: print(HELP_MSG),
        'clear_restore_cache':
            lambda: clear_restore_cache(),
        'install':
            lambda: install(sys.argv[2])}

    dispatch[command]()


if __name__ == "__main__":
    main()
