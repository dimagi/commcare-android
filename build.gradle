import com.android.builder.core.DefaultManifestParser
import org.apache.tools.ant.filters.ReplaceTokens

////////////
// README //
////////////

// This build script assumes the following directory structure:
// - somewhere/your/code/directory/is
// -- commcare-odk (github: https://github.com/dimagi/commcare-odk/)
// -- commcare (github: https://github.com/dimagi/commcare/)
// these directories MUST be named like this, or it won't work

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
        classpath 'com.google.gms:google-services:3.0.0'
    }
}

apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    jcenter()
    // for local aar inclusion
    flatDir {
        dirs 'app/libs'
    }
}

configurations {
    // prevents libs from including commons-logging, which Android already does
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.1'
    testCompile project(path: ':commcare-core', configuration: 'testsAsJar')
    // release build type expects commcare jars to be in app/libs
    debugCompile project(':commcare-core')
    compile project(':commcare-core')
    compile fileTree(dir: 'app/libs', include: '*.jar')
    compile(name: 'htmlspanner-custom', ext: 'aar')
    compile(name: 'simprints-lib', ext: 'aar')
    compile 'com.android.support:cardview-v7:24.1.0'
    compile 'com.android.support:recyclerview-v7:24.1.0'
    compile 'com.android.support:support-v4:24.1.0'
    compile 'com.android.support:gridlayout-v7:24.1.0'
    compile 'com.madgag.spongycastle:core:1.54.0.0'
    compile 'com.madgag.spongycastle:prov:1.54.0.0'
    compile 'com.google.android.gms:play-services-maps:9.2.1'
    compile 'com.google.android.gms:play-services-analytics:9.2.1'
    compile 'com.google.zxing:core:3.2.1'
    compile 'ch.acra:acra:4.9.0@aar'
    compile 'joda-time:joda-time:2.9.4'
    compile 'net.sf.kxml:kxml2:2.3.0'
    compile 'net.zetetic:android-database-sqlcipher:3.5.2@aar'
    compile 'org.apache.james:apache-mime4j:0.7.2'
    compile('org.apache.httpcomponents:httpmime:4.3.6') {
        exclude module: 'httpclient'
    }
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5.1'
    compile 'net.sourceforge.htmlcleaner:htmlcleaner:2.16'
    compile 'com.google.firebase:firebase-messaging:9.0.0'

}

ext {
    // Obtained from ~/.gradle/gradle.properties on build server or load default
    // empty strings.
    ACRA_USER = project.properties['ACRA_USER'] ?: ""
    ACRA_PASSWORD = project.properties['ACRA_PASSWORD'] ?: ""
    ACRA_URL = project.properties['ACRA_URL'] ?: ""
    ANALYTICS_TRACKING_ID_DEV = project.properties['ANALYTICS_TRACKING_ID_DEV'] ?: ""
    ANALYTICS_TRACKING_ID_LIVE = project.properties['ANALYTICS_TRACKING_ID_LIVE'] ?: ""
    GOOGLE_PLAY_MAPS_API_KEY = project.properties['GOOGLE_PLAY_MAPS_API_KEY'] ?: ""
    RELEASE_STORE_FILE = project.properties['RELEASE_STORE_FILE'] ?: "."
    RELEASE_STORE_PASSWORD = project.properties['RELEASE_STORE_PASSWORD'] ?: ""
    RELEASE_KEY_ALIAS = project.properties['RELEASE_KEY_ALIAS'] ?: ""
    RELEASE_KEY_PASSWORD = project.properties['RELEASE_KEY_PASSWORD'] ?: ""
    TRUSTED_SOURCE_PUBLIC_KEY = project.properties['TRUSTED_SOURCE_PUBLIC_KEY'] ?:
            "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHiuy2ULV4pobkuQN2TEjmR1tn" +
                    "HJ+F335hm/lVdaFQzvBmeq64MUMbumheVLDJaSUiAVzqSHDKJWH01ZQRowqBYjwo" +
                    "ycVSQSeO2glc6XZZ+CJudAPXe8iFWLQp3kBBnBmVcBXCOQFO7aLgQMv4nqKZsLW0" +
                    "HaAJkjpnc165Os+aYwIDAQAB"
    QA_BETA_APP_ID = ""
    STANDALONE_APP_ID = ""
    LTS_APP_ID = ""
    COMMCARE_APP_ID = ""
}

def ccAppId = project.hasProperty('cc_app_id') ? cc_app_id : ""
def ccDomain = project.hasProperty('cc_domain') ? cc_domain : ""
def isConsumerApp = project.hasProperty('is_consumer_app') ? is_consumer_app : "false"
def runDownloadScripts = project.hasProperty('run_download_scripts') ? run_download_scripts : "true"
def ccDomainSafe = ccDomain.replaceAll("-", "")
def consumerAppUsername = getConsumerAppUsername(isConsumerApp);
def consumerAppPassword = getConsumerAppPassword(isConsumerApp);

/**
 * Get the version code from command line param
 *
 * @return int If the param -PversionCode is present then return int value or 1
 */
def computeVersionCode() {
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : 1
    println "VersionCode is set to $code"
    return code
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

android {
    compileSdkVersion "Google Inc.:Google APIs:23"
    buildToolsVersion "23.0.3"

    useLibrary 'org.apache.http.legacy'

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }

    dexOptions {
        preDexLibraries = true
        jumboMode = true
        incremental = true
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        applicationId "org.commcare.dalvik"
        project.ext.COMMCARE_APP_ID = applicationId
        resValue "string", "application_name", "CommCare"
        def odkProviderStr = "org.commcare.android.provider.odk"
        manifestPlaceholders = [
                odkProvider         : odkProviderStr,
                googlePlayMapsApiKey: "${project.ext.GOOGLE_PLAY_MAPS_API_KEY}"
        ]

        versionCode computeVersionCode()

        // when set, app won't show install screen and try to install
        // resources from assets folder
        buildConfigField "boolean", "IS_SINGLE_APP_BUILD", "false"
        buildConfigField "boolean", "IS_CONSUMER_APP", "false"
        buildConfigField "String", "CONSUMER_APP_USERNAME", "\"\""
        buildConfigField "String", "CONSUMER_APP_PASSWORD", "\"\""

        buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
        buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""

        buildConfigField "String", "ACRA_URL", "\"${project.ext.ACRA_URL}\""
        buildConfigField "String", "ACRA_PASSWORD", "\"${project.ext.ACRA_PASSWORD}\""
        buildConfigField "String", "ACRA_USER", "\"${project.ext.ACRA_USER}\""
        buildConfigField "String", "BUILD_DATE", "\"" + getDate() + "\""
        buildConfigField "String", "BUILD_NUMBER", "\"" + computeVersionCode() + "\""
        buildConfigField "String", "TRUSTED_SOURCE_PUBLIC_KEY", "\"${project.ext.TRUSTED_SOURCE_PUBLIC_KEY}\""
        buildConfigField "String", "ANALYTICS_TRACKING_ID_LIVE", "\"${project.ext.ANALYTICS_TRACKING_ID_LIVE}\""
        buildConfigField "String", "ANALYTICS_TRACKING_ID_DEV", "\"${project.ext.ANALYTICS_TRACKING_ID_DEV}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            storeFile file(project.ext.RELEASE_STORE_FILE)
            storePassword project.ext.RELEASE_STORE_PASSWORD
            keyAlias project.ext.RELEASE_KEY_ALIAS
            keyPassword project.ext.RELEASE_KEY_PASSWORD
        }
    }

    def sourceLocations = ['app/src']

    sourceSets {
        main {
            jniLibs.srcDirs = ['app/libs']
            manifest.srcFile 'app/AndroidManifest.xml'
            java.srcDirs = sourceLocations
            resources.srcDirs = ['app/src']
            aidl.srcDirs = ['app/src']
            renderscript.srcDirs = ['app/src']
            res.srcDirs = ['app/res']
            assets.srcDirs = ['app/assets']
        }

        commcare {
            manifest.srcFile 'app/CommcareAndroidManifest.xml'
        }

        qabeta {
            manifest.srcFile 'app/CommcareAndroidManifest.xml'
        }

        standalone {
            res.srcDirs = ['app/standalone/res']
            assets.srcDirs = ['app/standalone/assets']
        }

        test {
            java.srcDirs = ['unit-tests/src/']
            resources.srcDirs = ['unit-tests/resources/']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    productFlavors {
        commcare {
            // builds normal commcare
            // use the settings from defaultConfig
        }

        lts {
            // long term support build of CommCare
            applicationId "org.commcare.lts"
            project.ext.LTS_APP_ID = applicationId

            // setup content provider strings correctly to not conflict with other apps
            def odkProviderStr = "org.commcare.lts.provider.odk"
            manifestPlaceholders = [odkProvider: odkProviderStr]
            buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
            buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""

            // set the app name
            resValue "string", "application_name", " CommCare LTS"
        }

        qabeta {
            // app w/ id tied to commcare version, so you can install standalone,
            // next to play store version

            // grab commcare version from manifest
            def manifestParser = new DefaultManifestParser()
            def ccVersion = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
            // convert numbers to words to use in app id
            def ccVersionSafe = numbersToLetters(ccVersion)


            applicationId "org.commcare.${ccVersionSafe}"
            project.ext.QA_BETA_APP_ID = applicationId

            // setup content provider strings correctly to not conflict with other apps
            def odkProviderStr = "org.commcare.${ccVersionSafe}.provider.odk"
            manifestPlaceholders = [odkProvider: odkProviderStr]
            buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
            buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""

            // set the app name
            resValue "string", "application_name", " ${ccVersion} QA CommCare"
        }

        standalone {
            // Builds commcare w/ ccz app packaged in the apk.
            // Must be invoked from command-line w/ args pointing to app domain &
            // id
            def uniquePackageIdentifier = getStandalonePackageIdentifier(ccDomainSafe, isConsumerApp)
            def appDisplayName = getStandaloneApplicationName(ccDomainSafe, isConsumerApp)

            applicationId "org.commcare.${uniquePackageIdentifier}"
            project.ext.STANDALONE_APP_ID = applicationId
            resValue "string", "application_name", appDisplayName
            def odkProviderStr = "org.commcare.${uniquePackageIdentifier}.provider.odk"
            manifestPlaceholders = [odkProvider: odkProviderStr]

            buildConfigField "boolean", "IS_SINGLE_APP_BUILD", "true"
            buildConfigField "boolean", "IS_CONSUMER_APP", isConsumerApp
            buildConfigField "String", "CONSUMER_APP_USERNAME", "\"${consumerAppUsername}\""
            buildConfigField "String", "CONSUMER_APP_PASSWORD", "\"${consumerAppPassword}\""
            // include this again so that the value get reloaded
            buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
            buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'app/proguard.cfg'

            buildConfigField "String", "BUILD_DIR", fixEscaping("\"${buildDir}\"")
            buildConfigField "String", "PROJECT_DIR", fixEscaping("\"${projectDir}\"")

        }

        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'app/proguard.cfg'
        }
    }

    // Ignore un-minified graphing files
    aaptOptions {
        ignoreAssetsPattern "!*.max.js:!*.max.css"
    }

    testOptions {
        unitTests.all {
            // Needed for robolectric tests to work with kxml for some
            // bizarre reason
            jvmArgs '-noverify'
            systemProperty 'robolectric.logging.enable', true
            systemProperty 'robolectric.logging', 'stdout'
        }
    }
}

/**
 * Setup tasks to inject google-services.json file with package name matching
 * the build variant.

 * NOTE: My Groovy knowledge is abismal and Gradle plugins do black magic,
 * hence, the need for an *_APP_ID var for each build variant :(
 */
afterEvaluate {
    processQabetaDebugGoogleServices.dependsOn switchGoogleServicesQabeta
    processQabetaReleaseGoogleServices.dependsOn switchGoogleServicesQabeta
    processStandaloneDebugGoogleServices.dependsOn switchGoogleServicesStandalone
    processStandaloneReleaseGoogleServices.dependsOn switchGoogleServicesStandalone
    processLtsDebugGoogleServices.dependsOn switchGoogleServicesLts
    processLtsReleaseGoogleServices.dependsOn switchGoogleServicesLts
    processCommcareDebugGoogleServices.dependsOn switchGoogleServicesCommcare
    processCommcareReleaseGoogleServices.dependsOn switchGoogleServicesCommcare
}

task switchGoogleServicesCommcare(type: Copy) {
    description = 'Makes build use normal google-services.json file'
    println project.ext.COMMCARE_APP_ID

    /**
     * This is an awkward workaround for a Windows build error that occurs when you try
     * to copy something into the root directory (containing the .gradle folder). Don't
     * change it without testing on a windows machine
     */
    outputs.files.setFrom(file("$projectDir/google-services.json"))
    from file("templates/google-services.json")
    filter(ReplaceTokens, tokens: [applicationId: project.ext.COMMCARE_APP_ID])
    into projectDir
}

task switchGoogleServicesLts(type: Copy) {
    description = 'Switches package name in google-services.json to match Lts package name'

    /**
     * This is an awkward workaround for a Windows build error that occurs when you try
     * to copy something into the root directory (containing the .gradle folder). Don't
     * change it without testing on a windows machine
     */
    outputs.files.setFrom(file("$projectDir/google-services.json"))
    from file("templates/google-services.json")
    filter(ReplaceTokens, tokens: [applicationId: project.ext.LTS_APP_ID])
    into projectDir
}

task switchGoogleServicesStandalone(type: Copy) {
    description = 'Switches package name in google-services.json to match Standalone package name'
    outputs.upToDateWhen { false }

    /**
     * This is an awkward workaround for a Windows build error that occurs when you try
     * to copy something into the root directory (containing the .gradle folder). Don't
     * change it without testing on a windows machine
     */
    outputs.files.setFrom(file("$projectDir/google-services.json"))
    from file("templates/google-services.json")
    filter(ReplaceTokens, tokens: [applicationId: project.ext.STANDALONE_APP_ID])
    into projectDir
}

task switchGoogleServicesQabeta(type: Copy) {
    description = 'Switches package name in google-services.json to match Qabeta package name'

    /**
     * This is an awkward workaround for a Windows build error that occurs when you try
     * to copy something into the root directory (containing the .gradle folder). Don't
     * change it without testing on a windows machine
     */
    outputs.files.setFrom(file("$projectDir/google-services.json"))
    from file("templates/google-services.json")
    filter(ReplaceTokens, tokens: [applicationId: project.ext.QA_BETA_APP_ID])
    into projectDir
}

/**
 * Download and unpack commcare app associated with 'cc_app_id' into assets
 * folder
 */
task downloadCCApp(type: Exec)

// task configuration phase
downloadCCApp {
    workingDir '.'

    commandLine 'bash', 'scripts/download_app_into_standalone_asset.sh', ccDomain, ccAppId, android.sourceSets.standalone.assets.srcDirs.first()

    ignoreExitValue = true

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException("exec failed; see output above")
        }
    }
}

// dynamic check at task execution time
downloadCCApp << {
    if (ccAppId.equals("")) {
        throw new InvalidUserDataException("Please provide cc_app_id property (CommCare App ID) to be packaged with apk")
    }
    if (ccDomain.equals("")) {
        throw new InvalidUserDataException("Please provide cc_domain property (CommCare App Domain) to be packaged with apk")
    }
}


task downloadRestoreFile(type: Exec)

// task configuration phase
downloadRestoreFile {
    workingDir '.'

    commandLine 'bash', 'scripts/download_restore_into_standalone_asset.sh', ccDomain, consumerAppUsername, consumerAppPassword, android.sourceSets.standalone.assets.srcDirs.first()

    ignoreExitValue = true

    doLast {
        if (execResult.exitValue != 0) {
            throw new GradleException("exec failed; see output above")
        }
    }
}

// dynamic check at task execution time
downloadRestoreFile << {
    if (consumerAppUsername.equals("")) {
        throw new InvalidUserDataException("Please provide username for restore to be packaged with apk")
    }
    if (consumerAppPassword.equals("")) {
        throw new InvalidUserDataException("Please provide password for restore to be packaged with apk")
    }
}



// dynamically inject commcare app download into standalone build process
tasks.whenTaskAdded { task ->
    if ((task.name == 'processStandaloneDebugResources' ||
            task.name == 'processStandaloneReleaseResources') && "true".equals(runDownloadScripts)) {
        task.dependsOn downloadCCApp
    }
    if ((task.name == 'processStandaloneDebugResources' ||
            task.name == 'processStandaloneReleaseResources')
            && "true".equals(isConsumerApp) && "true".equals(runDownloadScripts)) {
        task.dependsOn downloadRestoreFile
    }
}

/**
 * convert version code to english words for use in application id.
 * example: 2.26 -> twotwosix
 */
def numbersToLetters(String version) {
    String[] chars = version.split('');
    StringBuilder words = new StringBuilder();
    for (String num : chars) {
        switch (num) {
            case "1": words.append("one"); break;
            case "2": words.append("two"); break;
            case "3": words.append("three"); break;
            case "4": words.append("four"); break;
            case "5": words.append("five"); break;
            case "6": words.append("six"); break;
            case "7": words.append("seven"); break;
            case "8": words.append("eight"); break;
            case "9": words.append("nine"); break;
            case "0": words.append("zero"); break;
            default: break; // skip non-numeric
        }
    }
    return words.toString();
}

def fixEscaping(String s) {
    return s.replaceAll("\\\\", "\\\\\\\\");
}

def getStandalonePackageIdentifier(ccDomainSafe, isConsumerApp) {
    if (project.hasProperty('application_name')) {
        return ccDomainSafe + "." + cleanseAppNameForPackageIdentifier(application_name)
    } else if ("true".equals(isConsumerApp)) {
        throw new InvalidUserDataException("An application_name property must be provided for consumer app standalone builds")
    } else {
        return ccDomainSafe;
    }
}


def cleanseAppNameForPackageIdentifier(appName) {
    return appName.replaceAll("[ '.:]", "").replaceAll("\\\\", "").toLowerCase()
}


def getStandaloneApplicationName(ccDomainSafe, isConsumerApp) {
    if (project.hasProperty('application_name')) {
        return application_name;
    } else if ("true".equals(isConsumerApp)) {
        throw new InvalidUserDataException("An application_name property must be provided for consumer app standalone builds")
    } else {
        return ccDomainSafe;
    }
}

def getConsumerAppUsername(isConsumerApp) {
    if (project.hasProperty('username')) {
        return username;
    } else if ("true".equals(isConsumerApp)) {
        throw new InvalidUserDataException("A username property must be provided for consumer app standalone builds")
    } else {
        return "";
    }
}

def getConsumerAppPassword(isConsumerApp) {
    if (project.hasProperty('password')) {
        return password;
    } else if ("true".equals(isConsumerApp)) {
        throw new InvalidUserDataException("A password property must be provided for consumer app standalone builds")
    } else {
        return "";
    }
}

// must be at bottom of file to fix some stupid google bug
apply plugin: 'com.google.gms.google-services'
