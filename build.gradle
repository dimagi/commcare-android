////////////
// README //
////////////

// This build script assumes the following directory structure:
// - somewhere/your/code/directory/is
// -- commcare-odk (github: https://github.com/dimagi/commcare-odk/)
// -- commcare (github: https://github.com/dimagi/commcare/)
// -- javarosa (github: https://github.com/dimagi/javarosa/)
// these directories MUST be named like this, or it won't work

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
    }
}

apply plugin: 'com.android.application'

// we need mavenCentral to fetch eventual dependencies, such as GridViewWithHeaderAndFooter
repositories {
  mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.robolectric:robolectric:3.0"
    testCompile project(path: ':javarosa', configuration: 'testsAsJar')
    // release build type expects javarosa and commcare jars to be in app/libs
    debugCompile project(':javarosa')
    debugCompile project(':commcare')
    compile project(':javarosa')
    compile project(':commcare')
    compile project(':libraries:mapballoons')
    compile project(':libraries:achartengine')
    compile project(':libraries:AndroidStaggeredGrid:library')
    compile fileTree(dir: 'app/libs', include: '*.jar')
    compile 'in.srain.cube:grid-view-with-header-footer:1.0.12'
    compile 'com.android.support:support-v4:23.1.0'
    compile 'com.android.support:gridlayout-v7:23.1.0'
    compile 'com.madgag.spongycastle:core:1.52.0.0'
    compile 'com.madgag.spongycastle:prov:1.52.0.0'
}

project.ext {
    compileSdkVersion = "Google Inc.:Google APIs:22"
    buildToolsVersion = "23.0.2"
}
project(':libraries:AndroidStaggeredGrid:library') {
  android{
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
  }
}

project(':libraries:mapballoons') {
  android{
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
  }
}

ext {
  // Obtained from ~/.gradle/gradle.properites on build server or load default
  // empty strings.
  ACRA_USER = project.properties['ACRA_USER'] ?: ""
  ACRA_PASSWORD = project.properties['ACRA_PASSWORD'] ?: ""
  ACRA_URL = project.properties['ACRA_URL'] ?: ""
  MAPS_API_KEY = project.properties['MAPS_API_KEY'] ?: ""
  RELEASE_STORE_FILE = project.properties['RELEASE_STORE_FILE'] ?: "."
  RELEASE_STORE_PASSWORD = project.properties['RELEASE_STORE_PASSWORD'] ?: ""
  RELEASE_KEY_ALIAS = project.properties['RELEASE_KEY_ALIAS'] ?: ""
  RELEASE_KEY_PASSWORD = project.properties['RELEASE_KEY_PASSWORD'] ?: ""
  TRUSTED_SOURCE_PUBLIC_KEY = project.properties['TRUSTED_SOURCE_PUBLIC_KEY'] ?:
            "MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDHiuy2ULV4pobkuQN2TEjmR1tn" +
            "HJ+F335hm/lVdaFQzvBmeq64MUMbumheVLDJaSUiAVzqSHDKJWH01ZQRowqBYjwo" +
            "ycVSQSeO2glc6XZZ+CJudAPXe8iFWLQp3kBBnBmVcBXCOQFO7aLgQMv4nqKZsLW0" +
            "HaAJkjpnc165Os+aYwIDAQAB";
}

def ccAppId = project.hasProperty('cc_app_id') ? cc_app_id : ""
def ccDomain = project.hasProperty('cc_domain') ? cc_domain : ""
def ccDomainSafe = ccDomain.replaceAll("-", "")

/**
 * Get the version code from command line param
 * 
 * @return int If the param -PversionCode is present then return int value or 1
 */
def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : 1
    println "VersionCode is set to $code"
    return code
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    lintOptions {
      abortOnError false
    }

    packagingOptions {
      exclude 'META-INF/LICENSE'
      exclude 'META-INF/LICENSE.txt'
      exclude 'META-INF/DEPENDENCIES'
      exclude 'META-INF/NOTICE'
      exclude 'META-INF/NOTICE.txt'
    }

    dexOptions {
        preDexLibraries = true
        jumboMode = true
    }

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 22
        applicationId "org.commcare.dalvik"
        def odkProviderStr = "org.commcare.android.provider.odk"
        manifestPlaceholders = [ odkProvider:odkProviderStr]

        versionCode getVersionCode()

        // when set, app won't show install screen and try to install
        // resources from assets folder
        buildConfigField "boolean", "IS_SINGLE_APP_BUILD", "false"

        buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
        buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""

        buildConfigField "String", "ACRA_URL", "\"${project.ext.ACRA_URL}\""
        buildConfigField "String", "ACRA_PASSWORD", "\"${project.ext.ACRA_PASSWORD}\""
        buildConfigField "String", "ACRA_USER", "\"${project.ext.ACRA_USER}\""
        buildConfigField "String", "MAPS_API_KEY", "\"${project.ext.MAPS_API_KEY}\""
        buildConfigField "String", "BUILD_DATE", "\"" + getDate() + "\""
        buildConfigField "String", "BUILD_NUMBER", "\"" + getVersionCode() + "\""
        buildConfigField "String", "TRUSTED_SOURCE_PUBLIC_KEY", "\"${project.ext.TRUSTED_SOURCE_PUBLIC_KEY}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
       release {
           storeFile file(project.ext.RELEASE_STORE_FILE)
           storePassword project.ext.RELEASE_STORE_PASSWORD
           keyAlias project.ext.RELEASE_KEY_ALIAS
           keyPassword project.ext.RELEASE_KEY_PASSWORD
       }
    }

    def sourceLocations = ['app/src']

    sourceSets {
      main {
        jniLibs.srcDirs = ['app/libs']
        manifest.srcFile 'app/AndroidManifest.xml'
        java.srcDirs = sourceLocations
        resources.srcDirs = ['app/src']
        aidl.srcDirs = ['app/src']
        renderscript.srcDirs = ['app/src']
        res.srcDirs = ['app/res']
        assets.srcDirs = ['app/assets']
      }

      standalone {
        res.srcDirs = ['app/standalone/res']
        assets.srcDirs = ['app/standalone/assets']
      }

      test {
        java.srcDirs = ['unit-tests/src/']
        resources.srcDirs = ['unit-tests/resources/']
      }

      // Move the tests to tests/java, tests/res, etc...
      instrumentTest.setRoot('tests')

      // Move the build types to build-types/<type>
      // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
      // This moves them out of them default location under src/<type>/... which would
      // conflict with src/ being used by the main source set.
      // Adding new build types or product flavors should be accompanied
      // by a similar customization.
      debug.setRoot('build-types/debug')
      release.setRoot('build-types/release')
    }
    productFlavors {
      commcare {
        // builds normal commcare
        // use the settings from defaultConfig
      }
      standalone {
        // Builds commcare w/ ccz app packaged in the apk.
        // Must be invoked from command-line w/ args pointing to app domain &
        // id

        applicationId "org.commcare.${ccDomainSafe}"
        def odkProviderStr = "org.commcare.${ccDomainSafe}.provider.odk"
        manifestPlaceholders = [ odkProvider:odkProviderStr]

        buildConfigField "boolean", "IS_SINGLE_APP_BUILD", "true"
        // include this again so that the value get reloaded
        buildConfigField "String", "CC_AUTHORITY", "\"${applicationId}\""
        buildConfigField "String", "ODK_AUTHORITY", "\"${odkProviderStr}\""
      }
    }

    buildTypes {
      debug {
        debuggable true
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'app/proguard.cfg'
      }

      release {
        signingConfig signingConfigs.release
        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'app/proguard.cfg'
      }
    }

    testOptions {
        unitTests.all {
              // Needed for robolectric tests to work with kxml for some
              // bizarre reason
              jvmArgs '-noverify'
              systemProperty 'robolectric.logging.enable', true
              systemProperty 'robolectric.logging', 'stdout'
        }
    }
}

/**
 * Download and unpack commcare app associated with 'cc_app_id' into assets
 * folder
 */
task downloadCCApp(type: Exec)

// task configuration phase
downloadCCApp {
    workingDir '.'

    commandLine 'bash', 'scripts/download_app_into_standalone_asset.sh', ccDomain, ccAppId, android.sourceSets.standalone.assets.srcDirs.first()

    ignoreExitValue = true

    doLast {
         if (execResult.exitValue != 0) {
             throw new GradleException("exec failed; see output above")
         }
    }
}

// dynamic check at task execution time
downloadCCApp << {
    if (ccAppId.equals("")) {
        throw new InvalidUserDataException("Please provide cc_app_id property (CommCare App ID) to be packaged with apk")
    }
    if (ccDomain.equals("")) {
        throw new InvalidUserDataException("Please provide cc_domain property (CommCare App Domain) to be packaged with apk")
    }
}

// dynamically inject commcare app download into standalone build process
tasks.whenTaskAdded { task ->
    if (task.name == 'processStandaloneDebugResources' ||
            task.name == 'processStandaloneReleaseResources') {
        task.dependsOn downloadCCApp
    }
}
